package ru.osm.dkiselev.atlasgenerator;

import static java.lang.Math.cos;
import static java.lang.Math.toRadians;

import java.awt.geom.Area;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.util.ArrayList;

public class Calculator {
	
	private static double METERS_IN_DEGREE = 111111;
	
	public static Point addOffset(Point p, double de, double dn)
	{
		//Position, decimal degrees
		double lat = p.getLat();
		double lon = p.getLon();

		return new Point(lon + de / (METERS_IN_DEGREE * cos(toRadians(lat))), lat + dn / METERS_IN_DEGREE);
	}
	
	public static double getArea(Area a) { 
		double sum = 0;
		
		ArrayList<Point2D.Double> pointList = new ArrayList<Point2D.Double>();
	    double[] coords = new double[6];
	    int type;
	    double totalArea = 0;
	    PathIterator it = s.getPathIterator(null);
	    while (!it.isDone()) {
	        type = it.currentSegment(coords);
	        if (type == it.SEG_MOVETO) {
	            pointList.clear();
	            pointList.add(new Point2D.Double(coords[0], coords[1]));
	        } else if (type == it.SEG_LINETO) {
	            pointList.add(new Point2D.Double(coords[0], coords[1]));
	        } else if (type == it.SEG_CLOSE) {
	        	pointList.add(pointList.get(0));
	            totalArea += polyArea(pointList);
	            pointList.clear();
	        } else {
	            System.out.println("calculateShapeArea: Cannot calculate area for shapes with segment type other than SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.  Ignoring segment type=" + type);
	        }
	        it.next();
	    }
	}

	private static double polyArea(ArrayList<Double> pointList) {
		return 0;
	}
}
