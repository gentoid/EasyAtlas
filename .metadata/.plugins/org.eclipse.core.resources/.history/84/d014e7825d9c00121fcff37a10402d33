package ru.osm.dkiselev.atlasgenerator;

import java.awt.geom.Area;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;

import org.odftoolkit.odfdom.dom.OdfContentDom;
import org.odftoolkit.odfdom.dom.attribute.text.TextAnchorTypeAttribute;
import org.odftoolkit.odfdom.dom.element.text.TextPElement;
import org.odftoolkit.odfdom.incubator.doc.draw.OdfDrawFrame;
import org.odftoolkit.odfdom.incubator.doc.draw.OdfDrawImage;
import org.odftoolkit.simple.TextDocument;
import org.odftoolkit.simple.text.Paragraph;
import org.w3c.dom.Node;

public class ODFGenerator {
	public static void main(String[] args) {
		
		String scale = args[1];
		String folder = args[0];
		
		TemplateParser template = new TemplateParser(Integer.valueOf(scale), new File(folder + "/map-page.ott"));
		
		try {
			
			template.parse();
			
			PolygonFileReader polygonFileReader = new PolygonFileReader(new File(args[2]));
			Area covereage = polygonFileReader.loadPolygon();
			GridGenerator gridGenerator = new GridGenerator(covereage);
			gridGenerator.generate(template.getScaledMapWidthM(), template.getScaledMapHeightM());
			
			MapRasterDataSource rds = new MapRasterDataSource(300, 
					"http://localhost/cgi-bin/qgis_mapserv.fcgi?map=/home/dkiselev/osm/walking-papers/bw.qgs",
					template.getWidthPX(), template.getHeightPX());
			
			List<File> pageDocs = new ArrayList<File>();
			for(GridCell c : gridGenerator.listCells() ) {
				byte[] content = rds.loadImage(c);
				
				TextDocument newDoc = insertImage(content, template, "map_page" + c.getPn() + ".png");
				
				newDoc.save(folder + "/page" + c.getPn() + ".odt");
				//convertToPDF(folder + "/page" + c.getPn() + ".odt", folder + "/page" + c.getPn() + ".pdf");
				
				pageDocs.add(new File(folder + "/page" + c.getPn() + ".odt"));
			}
			
//			mergePages(pageDocs, folder + "/atlas.odf");
			
//			for(File f : pageDocs) {
//				f.delete(); 
//			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	private static void mergePages(List<File> pageDocs, String atlasFileName) throws Exception {
		TextDocument target = TextDocument.newTextDocument();
		for(File f : pageDocs) {
			Paragraph p = target.addParagraph(null);
			TextDocument src = TextDocument.loadDocument(f);
			target.insertContentFromDocumentAfter(src, p, false);
		}
		
	}

	/*
	 
	 <draw:frame draw:name="map_frame" draw:style-name="fr1"
		draw:z-index="0" svg:height="17.986cm" svg:width="16.222cm" svg:x="2.431cm"
		svg:y="2.78cm" text:anchor-page-number="1" text:anchor-type="page">
		<draw:text-box>
			<text:p text:style-name="Frame_20_contents">
				<draw:frame draw:name="graphics1" draw:style-name="fr5"
					draw:z-index="7" svg:height="17.655cm" svg:width="15.919cm"
					text:anchor-type="paragraph">
					<draw:image xlink:actuate="onLoad"
						xlink:href="Pictures/100000000000077B0000084C0845A435.png"
						xlink:show="embed" xlink:type="simple"></draw:image>
				</draw:frame>
			</text:p>
		</draw:text-box>
	 </draw:frame>
	 
	 */
	private static TextDocument insertImage(byte[] content, TemplateParser template, String imgName) throws Exception {
		
		template = template.withNewDocument();
		TextDocument newTextDocument = template.getDocument();
		
		OdfContentDom contentDom = newTextDocument.getContentDom();
		OdfDrawFrame drawFrame = contentDom.newOdfElement(OdfDrawFrame.class);
		
		XPath xpath = contentDom.getXPath();		
		Node mapFrame = template.getFrameByName().get(TemplateParser.MAP_FRAME);
		TextPElement lastPara = (TextPElement) xpath.evaluate("//text:p[last()]", mapFrame, XPathConstants.NODE);
		if (lastPara == null) {
			throw new RuntimeException("Map frame doesn't contains paragraph.");
		}
		lastPara.appendChild(drawFrame);

		drawFrame.setSvgWidthAttribute((template.getWidthMM() / 10) + "cm");
		drawFrame.setSvgHeightAttribute((template.getHeightMM() / 10) + "cm");
		drawFrame.setTextAnchorTypeAttribute(TextAnchorTypeAttribute.Value.PARAGRAPH.toString());
		drawFrame.setStyleRelHeightAttribute("100%");
		drawFrame.setStyleRelWidthAttribute("100%");

		OdfDrawImage image = (OdfDrawImage) drawFrame.newDrawImageElement();
		image.newImage(new ByteArrayInputStream(content), "Pictures/" + imgName, "image/png");
		
		return template.getDocument();
	}
}
